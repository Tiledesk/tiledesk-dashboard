.card-wrp{
    // width: 100%;
    min-width: 400px;
    height: auto;
    max-height: 100%;
    border-radius: 16px;
    overflow: hidden;
    margin: 10px 50px;
    padding: 0;
    background-color: #293445;

    .card-item{
        margin:20px 15px;
    }

    .card-title{
        // width: calc(100% - 40px);
        margin-left: 20px;
        color: white;
        font-size: 20px;
    }

    .card-subtitle{
        // width: calc(100% - 40px);
        margin-left: 30px;
        color: white;
    }

    .delay-wrapper {
        display: block;
        height: auto;
        width: 80%;
        // margin: 20px 0px 0px 20px;
        padding: 0em 0.75em 0;
    }

    .item-action-content{
        display: flex;
        width: 100%;

        .item-action-element{
            display: flex;
            align-items: center;
            width: 70%;
        }
    }

}

.box-buttons {
    text-align: end;
    padding: 5px 10px;

    $circle-size: 40px;
    .loading-btn-wrapper{
        display: inline-block;
        width: 240px;
        height: $circle-size;
        
        text-align: center;
    }
}


mat-accordion{
    width: 100%;
}
mat-expansion-panel {
    background-color: transparent;
        .mat-expansion-panel-header {
           height: auto;
           width: 100%;
        }

    mat-panel-title {
        .card-item{
            display: flex;
            align-items: center;
            width: 100%;
        }

        rule-text{
            width: 100%;
        }
    }

}





// Config
$circle-size: 40px;

// Unfortunatly we need a wrapper element containing the fixed width for centering the button within the animtion (you could also apply the width as an inline style).
.loading-btn-wrapper {
  display: inline-block;
  width: 240px;
  height: $circle-size;
  
  text-align: center;
}

.loading-btn {
  $root: &;
  
  position: relative;
  
  display: inline-block;
  width: 100%;
  height: 100%;
  
  background: #8ab4f8;
  
  border: 0;
  border-radius: 24px;
  
  cursor: pointer;
  
  transition: all .33s ease-in-out;
  
  &:hover {
    background: rgba(138, 180, 248, 0.8);
  }
  
  &, &:focus {
    outline: none;
  }
  
  // Styles for all states
  &--pending,
  &--success,
  &--fail {
    // Morph button to circle (width equals height)
    width: $circle-size;
    
    // Prevent any further clicks triggering events during animation
    pointer-events: none;
    cursor: default;
    
    // Hide text
    #{$root}__text {
      opacity: 0;
    }
  }
  
  // State "pending"
  // Show loading indicator
  &--pending:before {
    content: '';

    position: absolute;
    top: 50%;
    left: 50%;

    display: inline-block;

    // Can't use percentage here as we already show this icon during morph animation
    height: #{$circle-size * .7};
    width: #{$circle-size * .7};

    border: 3px solid rgba(255, 255, 255, .33);
    border-top-color: #fff;
    border-radius: 50%;

    animation:
      loading-btn--fade-in .33s ease,
      loading-btn--rotation .66s linear 0s infinite;
  }
    
  // Success state - show check icon
  &--success {
    background: #8bc34a !important;
    // Different background color (also on hover)
    &, &:hover {
      background: #8bc34a !important;
    }

    // Use "after" pseudo to trigger new fade in animation, as "before" is already used on "--pending"
    &:after {
      content: '';

      position: absolute;
      top: 50%;
      left: 50%;

      // Simulate checkmark icon
      display: inline-block;
      height: 25%;
      width: 50%;

      border: 3px solid #fff;
      border-top-width: 0;
      border-right-width: 0;

      transform: translate(-50%, -75%) rotate(-45deg);

      animation: 
        loading-btn--fade-in .6s ease;
    }
  } 

  // Fail state - show cross icon
  &--fail {
    
    // Different background color (also on hover)
    &, &:hover {
      background: #ff5722;
    }

    // Use "after" pseudo to trigger new fade in animation, as "before" is already used on "--pending"
    &:after {
      content: '';

      position: absolute;
      top: 50%;
      left: 50%;

      // Simulate cross icon
      display: inline-block;
      height: 65%;
      width: 65%;

      // Using background gradient is the only solution creating a cross with a single element
      background: 
        linear-gradient(
          to bottom,
          transparent 44%, 
          #fff 44%, 
          #fff 56%,  
          transparent 56%
        ),

        linear-gradient(
          to right,
          transparent 44%, 
          #fff 44%, 
          #fff 56%,  
          transparent 56%
      );

      transform: translate(-50%, -50%) rotate(-45deg);

      animation: 
        loading-btn--fade-in .6s ease;
    }
  } 
  
  // Text has to be positioned absolute in order prevent line-breaks or trimming of text when morphing button to circle.  
  &__text {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
    
    font-size: 13px;
    color: #fff;
    
    transition: inherit;
  }
}


/**
 * Animations
 */

@keyframes loading-btn--fade-in {
    0% {
        opacity: 0;
    }

    100% {
        opacity: 1;
    }
}

@keyframes loading-btn--rotation {
    0% {
        transform: translate(-50%, -50%) rotate(0deg);
    }

    100% {
        transform: translate(-50%, -50%) rotate(360deg);
    }
}


/**
 * Optical stuff - has nothing todo with button animation.
 */

.state-list {
  margin-bottom: 12px;
  
  .loading-btn-wrapper {
    background: repeating-linear-gradient(
      45deg,
      #fff,
      #fff 10px,
      #f0f0f0 10px,
      #f0f0f0 20px
    );
  }
}

.loading-btn-wrapper {
  & + & {
    margin-left: 8px;
  }
}

